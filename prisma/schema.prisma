generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  superadmin
  user
}

model User {
  id            String              @id @default(uuid())
  username      String              @unique @db.VarChar(50)
  email         String              @unique @db.VarChar(100)
  password      String
  role          Role                @default(user)
  avatar_url    String?             @db.VarChar(255)
  full_name     String?             @db.VarChar(100)
  phone         String?             @db.VarChar(20)
  country       String?             @db.VarChar(50)
  createdat     DateTime            @default(now())
  updatedat     DateTime            @updatedAt
  subcription   User_subscription[]
  movie         Movie[]
  favorite      Favorite[]
  review        Review[]
  watch_history Watch_history[]

  @@map("users")
}

model Subscription_plan {
  id               String              @id @default(uuid())
  name             String              @db.VarChar(50)
  price            Float
  duration_days    Int?
  features         Json
  is_active        Boolean             @default(true)
  user_subcription User_subscription[]

  @@map("subscription_plans")
}

model User_subscription {
  id         String            @id @default(uuid())
  user_id    String
  user       User              @relation(fields: [user_id], references: [id])
  plan_id    String
  plan       Subscription_plan @relation(fields: [plan_id], references: [id])
  start_date DateTime          @default(now())
  end_date   DateTime?
  status     SubStatus         @default(pending_payment)
  auto_renew Boolean           @default(false)
  createdat  DateTime          @default(now())
  payment    Payment[]

  @@map("user_subscription")
}

enum SubStatus {
  active
  expired
  canceled
  pending_payment
}

model Payment {
  id                      String            @id @default(uuid())
  user_subcription_id     String
  user_subcription        User_subscription @relation(fields: [user_subcription_id], references: [id])
  amount                  Float
  payment_method          Payment_method
  payment_details         Json
  status                  Payment_status    @default(complated)
  external_transaction_id String?           @db.VarChar(100)
  createdat               DateTime          @default(now())

  @@map("payment")
}

enum Payment_method {
  card
  paypal
  bank_transfer
  crypto
}

enum Payment_status {
  pending
  complated
  failed
  refunded
}

model Category {
  id             String           @id @default(uuid())
  name           String           @db.VarChar(50)
  slug           String           @unique @db.VarChar(50)
  description    String
  movie_category Movie_category[]

  @@map("categories")
}

model Movie {
  id                String            @id @default(uuid())
  title             String            @db.VarChar(100)
  slug              String            @unique @db.VarChar(100)
  description       String
  release_year      Int
  duration_minute   Int
  poster_url        String            @db.VarChar(255)
  rating            Float             @default(0)
  subscription_type Subscription_type @default(free)
  view_count        Int               @default(0)
  created_by        String
  user              User              @relation(fields: [created_by], references: [id])
  createdat         DateTime          @default(now())
  updatedat         DateTime?         @updatedAt
  movie_category    Movie_category[]
  movie_file        Movie_file[]
  favorite          Favorite[]
  review            Review[]
  watch_history     Watch_history[]

  @@map("movies")
}

enum Subscription_type {
  free
  premium
}

model Movie_category {
  id          String   @id @default(uuid())
  movie_id    String
  movie       Movie    @relation(fields: [movie_id], references: [id], onDelete: Cascade)
  category_id String
  category    Category @relation(fields: [category_id], references: [id])

  @@map("movie_categories")
}

model Movie_file {
  id       String  @id @default(uuid())
  movie_id String
  movie    Movie   @relation(fields: [movie_id], references: [id], onDelete: Cascade)
  file_url String  @db.VarChar(100)
  quality  Quality
  language String  @default("uz") @db.VarChar(20)

  @@map("movie_files")
}

enum Quality {
  p240  @map("240p")
  p360  @map("360p")
  p480  @map("480p")
  p720  @map("720p")
  p1080 @map("1080p")
  p4K   @map("4K")
}

model Favorite {
  id        String   @id @default(uuid())
  user_id   String
  user      User     @relation(fields: [user_id], references: [id])
  movie_id  String
  movie     Movie    @relation(fields: [movie_id], references: [id], onDelete: Cascade)
  createdat DateTime @default(now())

  @@unique([user_id, movie_id])
  @@map("favorites")
}

model Review {
  id        String   @id @default(uuid())
  user_id   String
  user      User     @relation(fields: [user_id], references: [id])
  movie_id  String
  movie     Movie    @relation(fields: [movie_id], references: [id], onDelete: Cascade)
  rating    Int
  comment   String
  createdat DateTime @default(now())

  @@map("reviews")
}

model Watch_history {
  id                 String   @id @default(uuid())
  user_id            String
  user               User     @relation(fields: [user_id], references: [id])
  movie_id           String
  movie              Movie    @relation(fields: [movie_id], references: [id], onDelete: Cascade)
  watched_duration   Int
  watched_percentage Float
  last_watched       DateTime @default(now())

  @@map("watch_history")
}
